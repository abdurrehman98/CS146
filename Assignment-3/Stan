{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Assignment3.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z4hlWra1sLPJ"
      },
      "source": [
        "\r\n",
        "# **1. Call Center Data Modeling**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0x-hE3ZksGfu"
      },
      "source": [
        "#importing libraries\r\n",
        "import numpy as np\r\n",
        "from scipy import stats\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import pystan"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qh-Xsxrikn0R"
      },
      "source": [
        "#importint call center data\n",
        "waiting_times_day = np.loadtxt('call-center.csv')"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QbrTimO_lESN",
        "outputId": "75eeadcd-50e0-4335-90eb-6d6dda1f47af"
      },
      "source": [
        "current_time = 0\r\n",
        "waiting_times_per_hour = [[] for _ in range(24)]  # Make 24 empty lists, one per hour\r\n",
        "for t in waiting_times_day:\r\n",
        "    current_hour = int(current_time // 60)\r\n",
        "    current_time += t\r\n",
        "    waiting_times_per_hour[current_hour].append(t)\r\n",
        "\r\n",
        "# get data for 13th hour\r\n",
        "waiting_times_hour = waiting_times_per_hour[13]\r\n",
        "print(\"{:d} call during 13th hour.\".format(len(waiting_times_hour)))"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "382 call during 13th hour.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OtKXULqIldBo",
        "outputId": "787ee00a-c7a8-4758-bd1c-636845041df6"
      },
      "source": [
        "stan_code = \"\"\"\r\n",
        "\r\n",
        "data {\r\n",
        "    real<lower=0> alpha;   // fixed prior hyperparameters for gamma \r\n",
        "    real<lower=0> beta;   // fixed prior hyperparameters for gamma \r\n",
        "    int<lower=0> n;   // number of call during the hour\r\n",
        "    vector[n] waiting_times_hour;   // call waiting times\r\n",
        "}\r\n",
        "\r\n",
        "parameters {\r\n",
        "    real lambda;  // the probability of call\r\n",
        "}\r\n",
        "\r\n",
        "model {\r\n",
        "    lambda ~ gamma(alpha, beta);                //prior over lambda \r\n",
        "    waiting_times_hour ~ exponential(lambda);   //likelihood function\r\n",
        "}\r\n",
        "\r\n",
        "\"\"\"\r\n",
        "\r\n",
        "call_center_stan = pystan.StanModel(model_code=stan_code)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO:pystan:COMPILING THE C++ CODE FOR MODEL anon_model_73c790cb2500e6157dc22f130b2eff70 NOW.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xrRMagUl0Tk",
        "outputId": "de85fc7a-02bc-4ba0-b419-52104f8462f6"
      },
      "source": [
        "# Stan model inputs\r\n",
        "stan_data = {\r\n",
        "    \"alpha\": 1,\r\n",
        "    \"beta\": 0.25,\r\n",
        "    \"n\": len(waiting_times_hour),\r\n",
        "    \"waiting_times_hour\": waiting_times_hour,\r\n",
        "}\r\n",
        "\r\n",
        "results = call_center_stan.sampling(data=stan_data)\r\n",
        "print(results)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Inference for Stan model: anon_model_73c790cb2500e6157dc22f130b2eff70.\n",
            "4 chains, each with iter=2000; warmup=1000; thin=1; \n",
            "post-warmup draws per chain=1000, total post-warmup draws=4000.\n",
            "\n",
            "         mean se_mean     sd   2.5%    25%    50%    75%  97.5%  n_eff   Rhat\n",
            "lambda   6.36  8.5e-3   0.33   5.73   6.14   6.35   6.57   7.01   1485    1.0\n",
            "lp__   322.57    0.02   0.73 320.52  322.4 322.85 323.03 323.08   1357    1.0\n",
            "\n",
            "Samples were drawn using NUTS at Fri Feb 19 22:42:11 2021.\n",
            "For each parameter, n_eff is a crude measure of effective sample size,\n",
            "and Rhat is the potential scale reduction factor on split chains (at \n",
            "convergence, Rhat=1).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kdGKJaNgmZb9"
      },
      "source": [
        "## **Visualizing the Data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "51d469VPl2_r",
        "outputId": "c3c8ce38-4a6c-4323-80e9-dbd560758604"
      },
      "source": [
        "samples = results.extract()\r\n",
        "\r\n",
        "# plot posterior histograms\r\n",
        "plt.hist(samples['lambda'], bins=50, density=True, label='Treatment')\r\n",
        "plt.title('Sampled posterior for lambda')\r\n",
        "plt.xlabel('Î»')\r\n",
        "plt.ylabel('Probability Density')\r\n",
        "plt.legend()\r\n",
        "plt.show()\r\n",
        "\r\n",
        "# posterior 98% confidence interval\r\n",
        "print('Posterior 98% interval over lambda:', np.percentile(samples['lambda'], [1.0, 99.0]))"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Posterior 98% interval over lambda: [5.62601478 7.14129769]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5OlNJk5usaMy"
      },
      "source": [
        "# **2. Normal Likelihood with Normal-Inverse-Gamma Prior**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pp7UGcx7mJ2i",
        "outputId": "9498ac01-7449-45fa-c5db-814843f73bf1"
      },
      "source": [
        "data = np.array([3.54551763569501, 4.23799861761927, 4.72138425951628, -0.692265320368236, 3.04473513808788, 3.10721270732507, 3.42982225852764, 3.12153903971176, 3.60532628639808, 2.46561737557325, 1.64059465916131, 2.4621623937158, 2.76744495617481, 2.11580054750407, 5.14077208608354, 4.90288499104252, 1.43357579078348, 4.78997817363558, 1.93633438207439, 2.43698838097178, 3.95389148701877, 2.4242295507716, 2.90256268679023, 2.90931728045901, 0.658072819386888, 3.05946763895983, 3.42615331539605, 2.68842833004417, 2.35850130765166, 2.20014998540933, 4.73846511350084, 4.19839721414451, 2.11805510171691, -0.572742936038015, 0.389413982010623, 3.87846130744249, 1.34057656890858, 0.7235748351719, 5.11042369840174, 4.00747556696571, 3.18080956726965, 3.24677964069676, 5.1154659863626, 1.80276616697155, 0.305877679021404, -0.449168307882718, 4.63705561194774, 1.37783714058301, 4.9608149859515, 6.7764195802069, 1.75515522922399, 7.04457337435215, 0.625185284955128, 2.25130734369064, 2.19770178119255, 2.16858257249432, 6.25367644481438, 0.116081323476489, 2.06315857864341, 1.82409781471718, 5.15226741230987, 2.03408231293173, -1.12450854337596, 5.03511270642234, 2.03841989653263, 5.80911741751597, 2.31718128783245, 4.97575010580997, 3.34262752222776, -0.786983904253601, 0.777362359850013, 0.975825009321195, 3.76354577515958, 7.27215002907876, 1.35404089480189, 3.76567940257157, 3.48573993343334, 1.85976988586156, 1.93567061960716, 5.31071812003942, 2.96832987672751, 3.32378908637275, 2.61631960054551, 5.80897964052825, 4.95215217171488, 1.32036772796131, 3.79932542233371, 3.08108492766309, 2.6734110081666, -0.14251851138521, 2.48744375588965, 3.98463042123415, 6.32781680028, 4.0029172024315, 4.23210369459457, 1.71412938967325, 5.16492114963802, 2.53409673107906, 4.77346963973334, 3.34088878725551, 4.77681472750664, 3.81135755590976, 1.14054269983137, 1.42057452397702, 0.132142311125433, 7.12577254064672, 4.85422012781764, 4.15745720676399, 4.48763147363348, 1.56060322283629, 2.64821761542887, 1.26655351354548, 4.48497722937931, 4.3286302403783, 4.26157679512625, 4.0597558651364, 5.14051109132496, 2.5660348362221, 1.10764013818617, 0.386889523012303, 3.54150473246237, 3.57480214382351, 1.95150869584847, 2.70688970563118, 2.47971849820016, 6.50838037000679, 4.01511556826974, 1.11562740835344, 5.02637639472439, 4.38184491686864, 5.60423144047386, 2.40067408379298, 5.7849941378344, 2.37225791084559, 6.86031465910273, 4.09214858239736, 6.85994063692621, 3.62202415158781, -1.11220646958158, 3.73920971696866, 3.24533871512216, 1.28724203643002, 0.291152541773164, 0.368630935755111, 6.71607270510525, 5.42278455200833, 5.35188416119281, 2.305874586163, -1.85878097203032, 2.69877382351447, 4.84121860550417, 4.40973060799391, 5.04399320650774, 2.68632252661298, 6.06531610659912, 3.11881325011993, 3.45532087005125, 3.08442259840346, 4.43564424136733, 2.84252623135804, 1.50536798885106, 1.48868622407603, 2.07322837615663, 2.5476910210998, 5.66941808257884, 2.16731067416426, 2.49843958833905, 3.94586413879977, 0.316433764679541, -0.608937441815983, 2.5943436558557, 1.05516869528337, 2.1447601332725, 6.65846634141906, 2.1771555267834, 5.23953812029442, 3.53629759842647, 6.03263538017003, 3.85739159396599, 5.95093453004638, 1.12856987160476, 3.5559912886093, 2.21974864244489, 3.38471394882135, -1.90805399279409, 3.5113699258973, 4.49319955412346, 5.10507952638867, 1.08277895384184, 4.58403638422759, 1.37304994426824, 4.17566975753523, 3.36454182510378, 0.177136582644021, 2.91337423388405, 3.22796455457526, 2.80124198378441, 1.95189718582788, 3.37659263896246, -1.6463045238231])\r\n",
        "print(len(data), \"data\")"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "200 data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-vstOkDinFwQ",
        "outputId": "e78e98fc-545e-4632-95cc-4fa9efc2209e"
      },
      "source": [
        "stan_code = \"\"\"\r\n",
        "\r\n",
        "data {\r\n",
        "    real<lower=0> mu;       // prior hyperparameter\r\n",
        "    real<lower=0> nu;       // prior hyperparameter\r\n",
        "    real<lower=0> alpha;   //  prior hyperparameter  \r\n",
        "    real<lower=0> beta;   //  prior hyperparameter\r\n",
        "    int<lower=0> n;   // length of data\r\n",
        "    vector[n] data_set;   // data\r\n",
        "}\r\n",
        "\r\n",
        "parameters {\r\n",
        "    real sigma2;      // variance\r\n",
        "    real x;           // mean\r\n",
        "}\r\n",
        "\r\n",
        "model {\r\n",
        "    sigma2 ~ inv_gamma(alpha, beta);    //prior over the mean\r\n",
        "    x ~ normal(mu, sigma2/nu);          //prior over the variance\r\n",
        "    data_set ~ normal(x, sqrt(sigma2));   //likelihood function\r\n",
        "}\r\n",
        "\r\n",
        "\"\"\"\r\n",
        "\r\n",
        "normal_inverse_gamma_stan = pystan.StanModel(model_code=stan_code)"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO:pystan:COMPILING THE C++ CODE FOR MODEL anon_model_d89678450d00e2c6b3ac8e4e822dbe22 NOW.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O9vLEhPknJq-",
        "outputId": "245aaf04-4a5f-40e5-cadd-a1034bf7dfbf"
      },
      "source": [
        "stan_data = {\r\n",
        "    \"mu\": 0,         #prior mean\r\n",
        "    \"nu\": 0.054,     #uncertainty in prior mean\r\n",
        "    \"alpha\": 1.12,   #marginal prior over mean\r\n",
        "    \"beta\": 0.4,     #marginal prior\r\n",
        "    \"n\": len(data),\r\n",
        "    \"data_set\": data,\r\n",
        "}\r\n",
        "\r\n",
        "results = normal_inverse_gamma_stan.sampling(data=stan_data)\r\n",
        "print(results)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Inference for Stan model: anon_model_d89678450d00e2c6b3ac8e4e822dbe22.\n",
            "4 chains, each with iter=2000; warmup=1000; thin=1; \n",
            "post-warmup draws per chain=1000, total post-warmup draws=4000.\n",
            "\n",
            "         mean se_mean     sd   2.5%    25%    50%    75%  97.5%  n_eff   Rhat\n",
            "sigma2    3.6  7.0e-3   0.36   2.97   3.34   3.57   3.83   4.38   2654    1.0\n",
            "x        3.06  2.3e-3   0.13    2.8   2.97   3.06   3.15   3.32   3363    1.0\n",
            "lp__   -236.5    0.02   0.99 -239.1 -236.9 -236.2 -235.8 -235.5   1860    1.0\n",
            "\n",
            "Samples were drawn using NUTS at Fri Feb 19 22:51:42 2021.\n",
            "For each parameter, n_eff is a crude measure of effective sample size,\n",
            "and Rhat is the potential scale reduction factor on split chains (at \n",
            "convergence, Rhat=1).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XrjNVVoRm0pG"
      },
      "source": [
        "## **Visualizing the Data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "2eqbhdKOnky1",
        "outputId": "36fa5b82-8b0e-4f85-f773-6232ae8826d1"
      },
      "source": [
        "samples = results.extract()\r\n",
        "\r\n",
        "# normal distribution over 10 samples\r\n",
        "num_samples = 10\r\n",
        "plot_x = np.linspace(-15, 15, 500)\r\n",
        "for i in range(num_samples):\r\n",
        "    plot_y = stats.norm.pdf(plot_x, loc=np.random.choice(samples['x'], 1), scale=np.sqrt(np.random.choice(samples['sigma2'], 1)))\r\n",
        "    plt.plot(plot_x, plot_y)\r\n",
        "plt.title('%i samples from a normal-inverse-gamma prior distribution' % num_samples)\r\n",
        "plt.show()\r\n",
        "\r\n",
        "# posterior 95% confidence interval\r\n",
        "print('Posterior 95% interval over x:', np.percentile(samples['x'], [2.5, 97.5]))\r\n",
        "print('Posterior 95% interval over sigma2:', np.percentile(samples['sigma2'], [2.5, 97.5]))\r\n"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Posterior 95% interval over x: [2.8017003  3.31962402]\n",
            "Posterior 95% interval over sigma2: [2.96584059 4.37877931]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZCR8A5PPgsCP"
      },
      "source": [
        "# **3. Log Normal HRTEM Data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "h2gm_PDpnqMy",
        "outputId": "23cfd04e-79e0-4230-ea16-32607249d89b"
      },
      "source": [
        "data= np.loadtxt('hrtem.csv')\r\n",
        "log_data = np.log(data)\r\n",
        "plt.hist(data)\r\n",
        "plt.show()"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXkAAAD4CAYAAAAJmJb0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAOs0lEQVR4nO3df6xfdX3H8edrrYjitoK9abqWrd0kWxgxYm4YRmOI7AeKsSwhBOK26ki6JbjhXCKV/YFbYlI3548lG0snzJowoAEcZO6HDcMw/7B6i8iPVqRDkDaFXoOozERXfe+P78Hd1fuD+z3fy/d+P3s+kuZ7zuf8en9y0ldPP99zzjdVhSSpTT8x7gIkSSvHkJekhhnyktQwQ16SGmbIS1LD1o67AID169fXli1bxl2GJE2UAwcOfKOqphZbZ1WE/JYtW5iZmRl3GZI0UZI8sdQ6DtdIUsMMeUlqmCEvSQ0z5CWpYYa8JDXMkJekhhnyktQwQ16SGmbIS1LDVsUTr5Nqy85Pj+W4j++6eCzHlTR5vJKXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDTPkJalhhrwkNWzJkE9yY5LjSR6a0/YXSb6S5IEkn0qybs6y9yU5nOSRJL+xUoVLkpb2Qq7kPwFcdFLbPuCcqno18FXgfQBJzgYuB3652+ZvkqwZWbWSpGVZMuSr6l7gmZPaPlNVJ7rZzwObu+ltwC1V9b2q+hpwGDhvhPVKkpZhFGPyvwv8Sze9CXhyzrIjXZskaQx6hXySPwFOADcNse2OJDNJZmZnZ/uUIUlawNAhn+QdwFuBt1dVdc1HgTPnrLa5a/sxVbW7qqaranpqamrYMiRJixgq5JNcBLwXeFtVfXfOoruAy5O8NMlW4CzgC/3LlCQNY8n3ySe5GbgAWJ/kCHAdg7tpXgrsSwLw+ar6/ap6OMle4CCDYZyrquoHK1W8JGlxS4Z8VV0xT/MNi6z/AeADfYqSJI2GT7xKUsMMeUlqmCEvSQ2b+B/yHtePaUvSJPBKXpIaZshLUsMMeUlqmCEvSQ0z5CWpYYa8JDXMkJekhhnyktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDVsy5JPcmOR4kofmtJ2RZF+SR7vP07v2JPmrJIeTPJDktStZvCRpcS/kSv4TwEUnte0E7q6qs4C7u3mANwNndX92ANePpkxJ0jCWDPmquhd45qTmbcCebnoPcMmc9k/WwOeBdUk2jqpYSdLyDDsmv6GqjnXTTwEbuulNwJNz1jvStf2YJDuSzCSZmZ2dHbIMSdJien/xWlUF1BDb7a6q6aqanpqa6luGJGkew4b8088Pw3Sfx7v2o8CZc9bb3LVJksZg2JC/C9jeTW8H7pzT/jvdXTbnA9+aM6wjSXqRrV1qhSQ3AxcA65McAa4DdgF7k1wJPAFc1q3+z8BbgMPAd4F3rkDNkqQXaMmQr6orFlh04TzrFnBV36IkSaPhE6+S1DBDXpIaZshLUsMMeUlqmCEvSQ0z5CWpYYa8JDXMkJekhhnyktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDTPkJalhhrwkNaxXyCf5oyQPJ3koyc1JTk2yNcn+JIeT3JrklFEVK0lanqFDPskm4A+B6ao6B1gDXA58EPhIVb0K+CZw5SgKlSQtX9/hmrXAy5KsBV4OHAPeBNzWLd8DXNLzGJKkIQ0d8lV1FPgQ8HUG4f4t4ADwbFWd6FY7Amyab/skO5LMJJmZnZ0dtgxJ0iL6DNecDmwDtgI/A5wGXPRCt6+q3VU1XVXTU1NTw5YhSVpEn+GaXwW+VlWzVfXfwB3A64F13fANwGbgaM8aJUlD6hPyXwfOT/LyJAEuBA4C9wCXdutsB+7sV6IkaVh9xuT3M/iC9T7gwW5fu4FrgPckOQy8ErhhBHVKkoawdulVFlZV1wHXndT8GHBen/1KkkbDJ14lqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSw3rdQqnx2LLz02M79uO7Lh7bsSUtn1fyktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWGGvCQ1zJCXpIb5MJSWZVwPYvkQljQcr+QlqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDesV8knWJbktyVeSHEryuiRnJNmX5NHu8/RRFStJWp6+T7x+DPjXqro0ySnAy4FrgburaleSncBO4Jqex9H/c/7koTScoa/kk/w08EbgBoCq+n5VPQtsA/Z0q+0BLulbpCRpOH2Ga7YCs8DfJ/lSko8nOQ3YUFXHunWeAjbMt3GSHUlmkszMzs72KEOStJA+Ib8WeC1wfVWdC/wXg6GZH6mqAmq+jatqd1VNV9X01NRUjzIkSQvpE/JHgCNVtb+bv41B6D+dZCNA93m8X4mSpGENHfJV9RTwZJJf7JouBA4CdwHbu7btwJ29KpQkDa3v3TV/ANzU3VnzGPBOBv9w7E1yJfAEcFnPY0iShtQr5KvqfmB6nkUX9tmvJGk0fOJVkhpmyEtSwwx5SWqYIS9JDTPkJalhhrwkNcyQl6SGGfKS1DBDXpIaZshLUsMMeUlqmCEvSQ0z5CWpYYa8JDXMkJekhhnyktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWGGvCQ1zJCXpIb1Dvkka5J8Kck/dfNbk+xPcjjJrUlO6V+mJGkYo7iSvxo4NGf+g8BHqupVwDeBK0dwDEnSEHqFfJLNwMXAx7v5AG8CbutW2QNc0ucYkqTh9b2S/yjwXuCH3fwrgWer6kQ3fwTYNN+GSXYkmUkyMzs727MMSdJ8hg75JG8FjlfVgWG2r6rdVTVdVdNTU1PDliFJWsTaHtu+HnhbkrcApwI/BXwMWJdkbXc1vxk42r9MSdIwhr6Sr6r3VdXmqtoCXA78e1W9HbgHuLRbbTtwZ+8qJUlDWYn75K8B3pPkMIMx+htW4BiSpBegz3DNj1TVZ4HPdtOPAeeNYr+SpH584lWSGmbIS1LDDHlJapghL0kNM+QlqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDTPkJalhhrwkNcyQl6SGGfKS1DBDXpIaZshLUsMMeUlqmCEvSQ0z5CWpYYa8JDVs7bgLkDS/LTs/PZbjPr7r4rEcVytj6Cv5JGcmuSfJwSQPJ7m6az8jyb4kj3afp4+uXEnScvQZrjkB/HFVnQ2cD1yV5GxgJ3B3VZ0F3N3NS5LGYOiQr6pjVXVfN/0d4BCwCdgG7OlW2wNc0rdISdJwRvLFa5ItwLnAfmBDVR3rFj0FbFhgmx1JZpLMzM7OjqIMSdJJeod8klcAtwPvrqpvz11WVQXUfNtV1e6qmq6q6ampqb5lSJLm0Svkk7yEQcDfVFV3dM1PJ9nYLd8IHO9XoiRpWH3urglwA3Coqj48Z9FdwPZuejtw5/DlSZL66HOf/OuB3wYeTHJ/13YtsAvYm+RK4Angsn4lSpKGNXTIV9XngCyw+MJh9yutNuN6KEkaBV9rIEkNM+QlqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDTPkJalhhrwkNcwf8pb0f4zzXT3+iPjoeSUvSQ0z5CWpYYa8JDXMkJekhhnyktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWG+1kDSqjHOVyqMy0q/ysEreUlq2IqFfJKLkjyS5HCSnSt1HEnSwlYk5JOsAf4aeDNwNnBFkrNX4liSpIWt1JX8ecDhqnqsqr4P3AJsW6FjSZIWsFJfvG4CnpwzfwT4lbkrJNkB7Ohmn0vyyJzF64FvrFBt49Zq31rtF7Tbt1b7BRPUt3xwWauf3K+fW2qDsd1dU1W7gd3zLUsyU1XTL3JJL4pW+9Zqv6DdvrXaL2i3b8P0a6WGa44CZ86Z39y1SZJeRCsV8l8EzkqyNckpwOXAXSt0LEnSAlZkuKaqTiR5F/BvwBrgxqp6eBm7mHcYpxGt9q3VfkG7fWu1X9Bu35bdr1TVShQiSVoFfOJVkhpmyEtSw1ZVyLf8KoQkjyd5MMn9SWbGXU8fSW5McjzJQ3PazkiyL8mj3efp46xxGAv06/1Jjnbn7f4kbxlnjcNKcmaSe5IcTPJwkqu79ok+b4v0a+LPW5JTk3whyZe7vv1p1741yf4uJ2/tbm5ZeD+rZUy+exXCV4FfY/Dw1BeBK6rq4FgLG5EkjwPTVTURD2gsJskbgeeAT1bVOV3bnwPPVNWu7h/o06vqmnHWuVwL9Ov9wHNV9aFx1tZXko3Axqq6L8lPAgeAS4B3MMHnbZF+XcaEn7ckAU6rqueSvAT4HHA18B7gjqq6JcnfAl+uqusX2s9qupL3VQgToqruBZ45qXkbsKeb3sPgL9pEWaBfTaiqY1V1Xzf9HeAQgyfTJ/q8LdKviVcDz3WzL+n+FPAm4LaufclztppCfr5XITRxsjoFfCbJge6VDq3ZUFXHuumngA3jLGbE3pXkgW44Z6KGM+aTZAtwLrCfhs7bSf2CBs5bkjVJ7geOA/uA/wSeraoT3SpL5uRqCvnWvaGqXsvgzZxXdUMDTarBGODqGAfs73rgF4DXAMeAvxxvOf0keQVwO/Duqvr23GWTfN7m6VcT562qflBVr2Hw1oDzgF9a7j5WU8g3/SqEqjrafR4HPsXghLXk6W589Plx0uNjrmckqurp7i/aD4G/Y4LPWzeueztwU1Xd0TVP/Hmbr18tnTeAqnoWuAd4HbAuyfMPsi6Zk6sp5Jt9FUKS07ovhUhyGvDrwEOLbzVx7gK2d9PbgTvHWMvIPB+And9kQs9b9yXeDcChqvrwnEUTfd4W6lcL5y3JVJJ13fTLGNyUcohB2F/arbbkOVs1d9cAdLc5fZT/fRXCB8Zc0kgk+XkGV+8weJXEP0xy35LcDFzA4LWnTwPXAf8I7AV+FngCuKyqJupLzAX6dQGD//IX8Djwe3PGsCdGkjcA/wE8CPywa76Wwfj1xJ63Rfp1BRN+3pK8msEXq2sYXJDvrao/6/LkFuAM4EvAb1XV9xbcz2oKeUnSaK2m4RpJ0ogZ8pLUMENekhpmyEtSwwx5SWqYIS9JDTPkJalh/wOWxvX6uL3bqQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wt78MAPSpDhm"
      },
      "source": [
        "stan_code = \"\"\"\r\n",
        "\r\n",
        "data {\r\n",
        "    real<lower=0> mu;       // prior hyperparameter\r\n",
        "    real<lower=0> nu;       // prior hyperparameter\r\n",
        "    real<lower=0> alpha;   //  prior hyperparameter for gamma \r\n",
        "    real<lower=0> beta;   //  prior hyperparameter for gamma \r\n",
        "    int<lower=0> n;   // length of data\r\n",
        "    vector[n] data_set;   // data\r\n",
        "}\r\n",
        "\r\n",
        "parameters {\r\n",
        "    real sigma2;      // variance\r\n",
        "    real x;           // mean\r\n",
        "}\r\n",
        "\r\n",
        "model {\r\n",
        "    sigma2 ~ inv_gamma(alpha, beta);    //prior over the mean\r\n",
        "    x ~ normal(mu, sigma2/nu);          //prior over the variance\r\n",
        "    data_set ~ normal(x, sqrt(sigma2));   //likelihood function\r\n",
        "}\r\n",
        "\r\n",
        "\"\"\"\r\n",
        "\r\n",
        "normal_inverse_gamma_stan = pystan.StanModel(model_code=stan_code)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qkZdr5qkpKbz",
        "outputId": "534aad3f-b161-48ff-e88c-a4226a43f374"
      },
      "source": [
        "stan_data = {\r\n",
        "        'mu': 2.3, \r\n",
        "        'nu': 0.1,   \r\n",
        "        'alpha' : 2, \r\n",
        "        'beta' : 5,\r\n",
        "        'n': len(log_data),  \r\n",
        "        'data_set': log_data} \r\n",
        "\r\n",
        "results = normal_inverse_gamma_stan.sampling(data=stan_data)\r\n",
        "print(results)"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Inference for Stan model: anon_model_d89678450d00e2c6b3ac8e4e822dbe22.\n",
            "4 chains, each with iter=2000; warmup=1000; thin=1; \n",
            "post-warmup draws per chain=1000, total post-warmup draws=4000.\n",
            "\n",
            "         mean se_mean     sd   2.5%    25%    50%    75%  97.5%  n_eff   Rhat\n",
            "sigma2   0.49  6.0e-4   0.03   0.44   0.47   0.49   0.51   0.56   2645    1.0\n",
            "x        1.89  6.0e-4   0.03   1.83   1.87   1.89   1.91   1.95   2666    1.0\n",
            "lp__   -76.06    0.02   0.97  -78.6 -76.45 -75.77 -75.36 -75.11   1574    1.0\n",
            "\n",
            "Samples were drawn using NUTS at Fri Feb 19 23:26:23 2021.\n",
            "For each parameter, n_eff is a crude measure of effective sample size,\n",
            "and Rhat is the potential scale reduction factor on split chains (at \n",
            "convergence, Rhat=1).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jw8SrgMpm-1h"
      },
      "source": [
        "## **Visualizing the Data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "QdMtI5Rlpugn",
        "outputId": "519867f7-8c92-4cd7-9abb-ec60e1218d87"
      },
      "source": [
        "samples = results.extract()\r\n",
        "\r\n",
        "samples_i = np.random.randint(4000,size=10)\r\n",
        "samples_x = samples['x'][samples_i]\r\n",
        "samples_s = samples['sigma2'][samples_i]\r\n",
        "\r\n",
        "# normal distribution over 10 samples\r\n",
        "num_samples = 10\r\n",
        "plt.hist(data, bins=20, density=True, alpha =0.5)\r\n",
        "plot_x = np.linspace(0, 30, 500)\r\n",
        "for i in range(num_samples):\r\n",
        "    plot_y = stats.lognorm.pdf(plot_x, np.sqrt(samples_s[i]), scale=np.exp(samples_x[i]))\r\n",
        "    plt.plot(plot_x, plot_y)\r\n",
        "plt.title('%i samples from a normal-inverse-gamma prior distribution' % num_samples)\r\n",
        "plt.show()\r\n",
        "\r\n",
        "print('Posterior 95% interval over x:', np.percentile(results['x'], [2.5, 97.5]))\r\n",
        "print('Posterior 95% interval over sigma2:', np.percentile(results['sigma2'], [2.5, 97.5]))"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Posterior 95% interval over x: [1.83239977 1.95430448]\n",
            "Posterior 95% interval over sigma2: [0.43855622 0.55984974]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZcxVZ-y0iUTm"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
